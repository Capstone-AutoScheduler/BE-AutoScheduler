# github repository actions 페이지에 나타날 이름
name: AutoScheduler github actions CI/CD

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  pull_request:
    branches:
      - develop

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 소스 코드 체크아웃
      - uses: actions/checkout@v4
      # Build를 위한 JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v4.0.2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # yml 파일 생성 - application.yml
      #cd ./src/main
      #mkdir resources
      - name: make application.yml
        run: |
          
          cd ./src/main/resources
          touch ./application.yml  
          echo "${{ secrets.YML }}" > ./application.yml
        shell: bash

      # gradle clean bootJar
      - name: Build Gradle
        run: ./gradlew clean bootJar

      # resources 디렉토리 내용 출력 (디버깅용)
      - name: List resources directory
        run: |
          ls -l ./src/main/resources
          if [ -f ./src/main/resources/adjective.txt ]; then echo "adjective.txt exists"; else echo "adjective.txt does not exist"; fi
        shell: bash

      # Docker Image Push
      - name: Docker Image push
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker build -t ${{ secrets.DOCKERHUB_USERNAME}}/${{ secrets.DOCKERHUB_REPOSITORY}} ./
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY}}

      ## deploy to develop
      - name: Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SERVER_IP }} # EC2 퍼블릭 IPv4 DNS
          username: ${{ secrets.USERNAME }} # ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd .ssh/BE-AutoScheduler/
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
            sudo docker-compose stop ${{ secrets.DOCKER_SERVICE_NAME }}
            sudo docker-compose rm -f ${{ secrets.DOCKER_SERVICE_NAME }}
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY}}
            sudo docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY}} ${{ secrets.DOCKER_IMAGE_NAME }}
            sudo docker-compose up -d